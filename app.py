# -*- coding: utf-8 -*-
"""NLP_Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18fj33o1-4WO6WQVTaaBT-6Lt6F7zP8EV
"""



import streamlit as st
import pandas as pd
import random
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

def load_data():
    df = pd.read_csv("indian_recipes_300_full.csv")

    return df

df = load_data()

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df['All Ingredients'] + " " + df['Recipe Name'])

st.set_page_config(page_title="Indian Recipe Chatbot 🍛", page_icon="🍴", layout="wide")

st.title("👩‍🍳 Indian Recipe Recommendation Chatbot 🇮🇳")
st.markdown("Ask me about Indian dishes, ingredients, or preferences and I’ll suggest recipes for you!")

st.sidebar.header("🔍 Filters")
selected_cuisine = st.sidebar.selectbox("Cuisine Type", ["Any"] + sorted(df["Cuisine Type"].unique().tolist()))
selected_difficulty = st.sidebar.selectbox("Difficulty", ["Any"] + sorted(df["Difficulty"].unique().tolist()))
veg_filter = st.sidebar.selectbox("Vegetarian / Non-Vegetarian", ["Any"] + sorted(df["Vegetarian / Non-Vegetarian"].unique().tolist()))

query = st.text_input("💬 What would you like to cook today?", placeholder="e.g. Show me easy South Indian vegetarian recipes with paneer")

if st.button("Get Recipe Suggestions"):
    if query.strip() == "":
        st.warning("Please enter a query or ingredient name.")
    else:
        # Compute similarity between query and recipe ingredients
        query_vec = tfidf.transform([query])
        similarity = cosine_similarity(query_vec, tfidf_matrix).flatten()
        indices = similarity.argsort()[-5:][::-1]

        results = df.iloc[indices]

        # Apply filters
        if selected_cuisine != "Any":
            results = results[results["Cuisine Type"] == selected_cuisine]
        if selected_difficulty != "Any":
            results = results[results["Difficulty"] == selected_difficulty]
        if veg_filter != "Any":
            results = results[results["Vegetarian / Non-Vegetarian"] == veg_filter]

        if results.empty:
            st.error("😕 No matching recipes found. Try changing filters or ingredients.")
        else:
            st.success(f"🍽️ Found {len(results)} matching recipes!")

            for _, row in results.iterrows():
                with st.expander(f"🍛 {row['Recipe Name']}"):
                    st.write(f"**Cuisine:** {row['Cuisine Type']}")
                    st.write(f"**Difficulty:** {row['Difficulty']}")
                    st.write(f"**Cooking Time:** {row['Cooking Time (mins)']} mins")
                    st.write(f"**Calories:** {row['Calories']} kcal")
                    st.write(f"**Type:** {row['Vegetarian / Non-Vegetarian']}")
                    st.write(f"**Description:** {row['Short Description']}")
                    st.write(f"**Ingredients:** {row['All Ingredients']}")

st.sidebar.markdown("---")
if st.sidebar.button("🎲 Surprise Me!"):
    random_recipe = df.sample(1).iloc[0]
    st.sidebar.success(f"**{random_recipe['Recipe Name']}**")
    st.sidebar.write(f"Cuisine: {random_recipe['Cuisine Type']}")
    st.sidebar.write(f"Difficulty: {random_recipe['Difficulty']}")
    st.sidebar.write(f"Ingredients: {random_recipe['All Ingredients']}")